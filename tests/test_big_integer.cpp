//
// Created by qiufeng on 2020/12/8.
//

// https://www.jetbrains.com/help/clion/creating-google-test-run-debug-configuration-for-test.html#add-google-tests

#include <vector>

#include "gtest/gtest.h"
#include "../src/big_integer.hpp"

using namespace std;


TEST(test_bigint, test_zero_init) {
    BigInteger b;
    EXPECT_EQ("0", b.ToString());
}

TEST(test_bigint, test_int64_init) {
    BigInteger b1(4611686027017322499);
    EXPECT_EQ("4611686027017322499", b1.ToString());

    BigInteger b2(-4611686027017322499);
    EXPECT_EQ("-4611686027017322499", b2.ToString());
}

TEST(test_bigint, test_str_init) {
    BigInteger b1("31231230935890328012983091238091213231");
    EXPECT_EQ("31231230935890328012983091238091213231", b1.ToString());

    BigInteger b2("-31231230935890328012983091238091213231");
    EXPECT_EQ("-31231230935890328012983091238091213231", b2.ToString());
}

TEST(test_bigint, test_is_even) {
    BigInteger b1(123);
    ASSERT_FALSE(b1.IsEven());
    b1 = 0;
    ASSERT_TRUE(b1.IsEven());
    b1 = 2;
    ASSERT_TRUE(b1.IsEven());
}

TEST(test_bigint, test_assign) {
    BigInteger b;
    b = 123;
    EXPECT_EQ("123", b.ToString());
    b = -123;
    EXPECT_EQ("-123", b.ToString());

    BigInteger c = b;
    EXPECT_EQ("-123", c.ToString());
    c = 123;
    EXPECT_EQ("123", c.ToString());
    EXPECT_EQ("-123", b.ToString());
}

TEST(test_bigint, test_convert_base) {
    vector<uint32_t> a({3, 8, 4});
    EXPECT_EQ(BigInteger::ConvertBase(a, 1 << 30, 1e9), vector<uint32_t>({17322499, 611686027, 4}));
    EXPECT_EQ(BigInteger::QuickConvertBase(a, 30, 1e9), vector<uint32_t>({17322499, 611686027, 4}));
}

TEST(test_bigint, test_unary_operators) {
    BigInteger a(123);
    auto b = +a;
    EXPECT_EQ("123", b.ToString());
    b = -123;
    EXPECT_EQ("-123", b.ToString());
    EXPECT_EQ("123", a.ToString());
    auto c = -a;
    EXPECT_EQ("-123", c.ToString());
}

TEST(test_bigint, test_relational_operators) {
    BigInteger a(0);
    BigInteger b("31231230935890328012983091238091213231");
    BigInteger c("31231230935890328012983091238091213231");
    BigInteger d("-31231230935890328012983091238091213231");
    BigInteger e("31231230935890328012983091238091213230");

    ASSERT_TRUE(a < b);
    ASSERT_TRUE(a <= b);
    ASSERT_TRUE(a > d);
    ASSERT_TRUE(a >= d);
    ASSERT_TRUE(b == c);
    ASSERT_TRUE(b >= c);
    ASSERT_FALSE(b != c);
    ASSERT_TRUE(b > e);
    ASSERT_TRUE(b >= e);

    a == "-0";
    ASSERT_TRUE(a == 0);
    ASSERT_TRUE(-a == 0);
    ASSERT_TRUE(a == -0);
    ASSERT_TRUE(a == "-0");
    ASSERT_TRUE(a == "0");

    a = "123";
    ASSERT_TRUE(a == 123);
    ASSERT_TRUE(-a != 123);
    ASSERT_TRUE(-a == -123);
}

TEST(test_bigint, test_add) {
    BigInteger a((1 << 30) - 2);
    BigInteger b((1 << 30) - 2);
    BigInteger c(0);
    BigInteger d("1237893275981729387958278912398153213");
    EXPECT_EQ("2147483644", (a + b).ToString());
    EXPECT_EQ("2147483644", (a + (1 << 30) - 2).ToString());
    EXPECT_EQ("1073741822", (a + c).ToString());
    EXPECT_EQ("1237893275981729387958278913471895035", (a + d).ToString());

    a = -a;
    EXPECT_EQ("0", (a + b).ToString());
    EXPECT_EQ("-1073741822", (a + c).ToString());
    EXPECT_EQ("1237893275981729387958278911324411391", (a + d).ToString());
}

TEST(test_bigint, test_sub) {
    BigInteger a((1 << 30) -2);
    BigInteger b((1 << 30) -2);
    BigInteger c(0);
    BigInteger d("1237893275981729387958278912398153213");
    BigInteger e((1 << 30) -3);

    EXPECT_EQ("0", (a - b).ToString());
    EXPECT_EQ("0", (a - (1 << 30) + 2).ToString());
    EXPECT_EQ("0", (c - c).ToString());
    EXPECT_EQ("1", (a - e).ToString());
    EXPECT_EQ("-1", (e - a).ToString());
    EXPECT_EQ("1073741822", (a - c).ToString());
    EXPECT_EQ("-1073741822", (c - a).ToString());
    EXPECT_EQ("-1237893275981729387958278911324411391", (a - d).ToString());

    a = -a;
    EXPECT_EQ("-2147483644", (a - b).ToString());
    EXPECT_EQ("-1237893275981729387958278913471895035", (a - d).ToString());

    a = -2;
    b = -3;
    EXPECT_EQ("1", (a - b).ToString());
    EXPECT_EQ("-1", (b - a).ToString());

    BigInteger f("323948257982739175921083447657832481390");
    BigInteger g("129038192031290389058290839189058908912312");

    EXPECT_EQ("-128714243773307649882369755741401076430922", (f - g).ToString());
    EXPECT_EQ("128714243773307649882369755741401076430922", (g - f).ToString());
}

TEST(test_bigint, test_mul_int64) {
    BigInteger a(0);
    BigInteger b("123125123543412346765432156765342");
    BigInteger c("-1231251235434123467654321564795798382903765342");

    EXPECT_EQ("0", (a * 12364123).ToString());
    EXPECT_EQ("0", (b * 0).ToString());
    EXPECT_EQ("1520980041772215646136729111541865393750", (b * 12353125).ToString());
    EXPECT_EQ("22712576430491980943006822592018466018422652406472", (b * 184467440737095516).ToString());
    EXPECT_EQ("-22712576430491980943006822592018466018422652406472", (b * -184467440737095516).ToString());
    EXPECT_EQ("227125764304919809430068225393046513883483802677880973104406472", (c * -184467440737095516).ToString());
    EXPECT_EQ("-227125764304919809430068225393046513883483802677880973104406472", (c * 184467440737095516).ToString());
}

TEST(test_bigint, test_grid_mul) {
    vector<uint64_t> a = {1, 0, 1};
    vector<uint64_t> b = {1, 0, 1};
    auto z = BigInteger::GridMultiplication(a, b);
    BigInteger::TrimZero(z);
    EXPECT_EQ(vector<uint64_t>({1, 0, 2, 0, 1}), z);

    vector<uint64_t> c = {213, 312, 1234, 1235, 63221, 3126, 67214};
    vector<uint64_t> d = {312, 1, 0, 6344, 12364, 31266543, 876876, 678, 8678, 8768};
    z = BigInteger::GridMultiplication(c, d);
    BigInteger::TrimZero(z);
    EXPECT_EQ(vector<uint64_t>({66456, 97557, 385320, 1737826, 24339047, 6672498256, 9986001914, 39273054566, 40499801327,
                                1978255524115, 154021506508, 2104354936458, 59499923210, 627020248, 610691860, 589332352}),
              z);

    vector<uint32_t> e = {0};
    vector<uint32_t> f = {0};
    auto zz = BigInteger::GridMultiplication(e, f);
    BigInteger::TrimZero(zz);
    EXPECT_EQ(vector<uint32_t>({}), zz);

    e = {1, 0, 1};
    f = {1, 0, 1};
    zz = BigInteger::GridMultiplication(e, f);
    BigInteger::TrimZero(zz);
    EXPECT_EQ(vector<uint32_t>({1, 0, 2, 0, 1}), zz);

    e = {123, 312, 6453, 4232};
    f = {123, 645, 624, 744};
    zz = BigInteger::GridMultiplication(e, f);
    BigInteger::TrimZero(zz);
    EXPECT_EQ(vector<uint32_t>({15129, 117711, 1071711, 4968921, 6988440, 7441800, 3148608}), zz);


}

TEST(test_bigint, test_karatsuba_mul) {
    vector<uint64_t> a = {1, 0, 1};
    vector<uint64_t> b = {1, 0, 1};
    auto z = BigInteger::KaratsubaMultiplication(a, b);
    BigInteger::TrimZero(z);
    EXPECT_EQ(vector<uint64_t>({1, 0, 2, 0, 1}), z);

    a = {380399, 872003, 242470, 534542, 604012, 579139, 298471, 874236, 170560, 595207};
    b = {656443, 331701, 161676, 826103, 744155, 490703, 922376, 331376, 793743, 323734};
    z = BigInteger::KaratsubaMultiplication(a, b);
    BigInteger::TrimZero(z);
    EXPECT_EQ(vector<uint64_t>({249710260757, 698598994028, 509913390037, 886554607701, 1616449257132, 1702819256753, 1886471837013, 2712630830491, 2454960267420, 2951256659898, 2662525576413, 2271282268767, 2167310562133, 2087127747682, 1163487391796, 1396068058454, 615638038136, 527657460841, 192688742938}),
              z);

    a = {13264, 463807, 109756, 292680, 963022, 204938, 8172, 618007, 72205, 379530, 409667, 977432, 591706, 623517, 533975, 364137, 118429, 610198, 419929, 202006, 733063, 20469, 895226, 953061, 357549, 17192, 614780, 112234, 521044, 821363, 711163, 774338, 430816, 443009, 316166, 873739, 490396, 65814, 542988, 55411, 620175, 362083, 78118, 778300, 897675, 701095, 516629, 745662, 137411, 678430, 831995, 272343, 347461, 957775, 807410, 423318, 363858, 583551, 198894, 477522, 13350, 813371, 721995, 147707};
    b = {12518, 358937, 144865, 50163, 721634, 537248, 626933, 813797, 89943, 876099, 874139, 555918, 257288, 615845, 692556, 16123, 844720, 422708, 393169, 555797, 8544, 698458, 841613, 49531, 428267, 654951, 339016, 344526, 403026, 852169, 452511, 863583, 785679, 130284, 905902, 85880, 607872, 955329, 11928, 551157, 808605, 271352, 909128, 888876, 932153, 851196, 350566, 94996, 608005, 229391, 35451, 316508, 91713, 856522, 444233, 335121, 219323, 964781, 28200, 760571, 504584, 800054, 122380, 681793};
    z = BigInteger::KaratsubaMultiplication(a, b);
    BigInteger::TrimZero(z);
    EXPECT_EQ(vector<uint64_t>({166038752, 10566876394, 169772908127, 110914020699, 165846297413, 737959378036, 564550700624, 660410008693, 1533832152490, 1112024014973, 1568555947237, 2115721957011, 1692885163613, 2395603481940, 2920827686530, 2779942583034, 2950345057311, 3733520470196, 4016402865214, 3293250824977, 4421432267380, 4476883018410, 4161208386959, 4977119636685, 4834764686171, 4902762348594, 5421539116287, 5648193142526, 5609245674342, 6336540513543, 6121743401349, 5982559250965, 7007021946042, 8186063371914, 6837933995794, 7945509473538, 9006593191642, 7348717642920, 8627654535294, 9145984565362, 9080042694296, 9781994988675, 9483616893618, 9129352439213, 10841895465261, 10925375205339, 9924131248116, 11397753787373, 11434150211534, 11655516301741, 11158757067977, 12591859039808, 12160441966561, 12105374842481, 14626764173541, 12607304586023, 13375884698319, 14822560548723, 12931745246211, 13946788929128, 15527136279569, 13312217908072, 14777191369347, 15274362654873, 14611315662459, 15256378347664, 15936803617674, 14656612202932, 15076389963743, 13007051589820, 13744894130900, 14408327380042, 14725238974043, 12538290119949, 13768593553548, 14276645801113, 11999218052324, 12520328230474, 11729290149880, 11751652903489, 11530224920340, 11099753266758, 10081436342330, 12519069838436, 10761938839155, 10109625383348, 11073806135538, 10370135459608, 10043398634129, 10577533462748, 9764287392325, 9514005641211, 9335499173363, 9204906439943, 8032740027678, 7930250580949, 7379627879997, 7533898327332, 7852066925488, 6621162638490, 5839080449290, 6527079877335, 5799621571241, 5878635982457, 6105111557603, 5141758975761, 5958492741787, 5256245165930, 3926653497710, 3603153828686, 4418623636874, 3026675262276, 3208081653510, 3065472250990, 3316321942705, 2801248121137, 2906988206552, 1851430622269, 2256515801809, 1481619995404, 1592472778259, 1168432189411, 1454594437757, 760807856148, 761081978481, 510327519695, 100705598651}),
              z);

    a = {788099, 862897, 6752, 210417, 669509, 323792, 60498, 643923, 27290, 872567, 202077, 693639, 304340, 557092, 758360, 977495, 860054, 508516, 883108, 568617, 1646, 110775, 355320, 219306, 420918, 421729, 497383, 667840, 822546, 15681, 549324, 685545, 849181, 787470, 680264, 177994, 267067, 359269, 404126, 934607, 508690, 744392, 887734, 423265, 597223, 480870, 584290, 360530, 13612, 72008};
    b = {842653, 576386, 12277, 748205, 277254, 643230, 169121, 196526, 914125, 449426, 902021, 596007, 397246, 912440, 628301, 895436, 362080,
         428908, 338212, 625182, 211428, 98652, 297108, 819580, 204660, 750681, 816144, 369317, 585900, 485748, 763265, 153403, 304804, 818124, 79582, 945776, 76791, 757606, 643781, 52117, 19771, 924423, 619595, 611494, 311521, 416993, 583393, 90579, 496976, 326268};
    z = BigInteger::KaratsubaMultiplication(a, b);
    BigInteger::TrimZero(z);
    EXPECT_EQ(vector<uint64_t>({664093986647, 1181371975955, 512726834721, 781453673337, 1549655524674, 1412545648927, 1093459957681, 1445877015165, 1849264904339, 2504492802498, 2639826491472, 2579328366053, 3347252654730, 3037411496530, 4446637554044, 4615088174883, 4532591231309, 4965886197213, 5088476576338, 6056537973559, 5085039882590, 4732964728814, 5639408566668, 6058397816211, 6629302316132, 6022877381675, 7697000662901, 7549204950224, 7760043271908, 7536196316706, 8069575175105, 7852301148685, 8126878116018, 8702899584912, 8667502621947, 8489371720448, 8708780086312, 9477607416467, 9612775679139, 10118007483268, 9746123542592, 11556806743199, 13040316112898, 10834356752364, 12259658776062, 11516979885629, 12153745691344, 12163983622448, 11301344046836, 11688750023247, 11807221861682, 11191719982376, 11675082413282, 11353916161701, 10854080178713, 10877645096003, 11113599557570, 11155868606282, 9755785882958, 10015387181081, 9837483430198, 9027982416022, 8241955234900, 8056988777053, 7749049961485, 7879646492763, 6894144244352, 7248618684983, 6997068719734, 7441745451767, 6434563563859, 6418904200814, 6404451494537, 5736400355142, 6372997582331, 5696291118614, 5630266130791, 5092888278217, 4118668108783, 4632197642260, 4403696476147, 3790843831888, 3851701599616, 3434804719767, 3159113433460, 2936632661837, 2453481150386, 2836184024657, 2498985681182, 1856772368006, 1748808158858, 1243520756567, 1017942112462, 725198797968, 517895024530, 413051811492, 130916651984, 40227407824, 23493906144}),
              z);
}

TEST(test_bigint, test_mul_bigint) {
    BigInteger a(0);
    BigInteger b("123512353421145434213123465431231");
    BigInteger c("-15492809389048094820985098019323512353421145434213123465431231");
    BigInteger d("38912839085249089038190589018390185903820948901859084390248290348908690487987891273891728937128915492809389048094820985098019323512353421145434213123465431231");
    BigInteger e("-31238902485905869050238901283905789083901285409659023849028912839085249089038190589018390185903820948901859084390248290348908690487987891273891728937128915492809389048094820985098019323512353421145434213123465431231");

    EXPECT_EQ("0", (a * b).ToString());
    EXPECT_EQ("0", (a * a).ToString());
    EXPECT_EQ("0", (a * c).ToString());
    EXPECT_EQ("0", (a * d).ToString());
    EXPECT_EQ("0", (a * e).ToString());

    EXPECT_EQ("-1913553348746548558838799200818650597421652050011867974066046505727747164815925115056790175361",
              (b * c).ToString());
    EXPECT_EQ("4806216333717447091236056228826889075437671490384968405836299724637409573943987238858506746413690243253133698844441319724733494550597421652050011867974066046505727747164815925115056790175361",
            (b * d).ToString());
    EXPECT_EQ("-1215594385633842830983372039708479390336344634896812978514673111158847111678384252120131998020171931328725772699177879745064596205648404688161009714616189068575796440181467944551211312014139378605908354743513525979400404060921985222479110987307306432577401946365081572124185691894186219429799668078071213035613845893395674163776633305983681705727747164815925115056790175361",
              (d * e).ToString());
}

TEST(test_bigint, test_div_int32) {
    BigInteger a("0");
    EXPECT_EQ("0", (a / 123).ToString());
    EXPECT_EQ("0", (a / -123).ToString());

    a = "859082930819058190823908590238490185902830986490289301840";
    EXPECT_EQ("6975724190893565238132485692018947826196439325809", (a / 123153225).ToString());
    EXPECT_EQ("-6975724190893565238132485692018947826196439325809", (a / -123153225).ToString());

    a = "31295880855727263167074137123361689253538556555530385857116022296376450713151635410807599855833680999502921261604300372979589151391050594116657405504869422301436668490865432430173545902298228105949631661458950054852343293118459218590393198006425929984721968748093987833756819667357187342684281825444651995800991825379489140585085077459872139649763805642968850431911486467300609034632065894292632684320054262874325664992598170537224594267766568019913453831724572578954233790810582953596206401859262623987183198090868253878065700665198959433806133288707878254188448423100571971204261503375449786802325574468191375789569";
    EXPECT_EQ("5230688839638273352512955952699271894824673073270434103551858208010333510022121440625639273609670560199100079691475825517954680459961845061088013745463814630313218853226177415922498382501298335243643736429999501072406154960826380212890848734378727980534925668996883876419962880178593428501660306355580558497326452882085949119772312653159374101601002960820636033845755341904871337305848361307435288751979610477049072824883266835879926731931285444655948164860349399002366954344045949475960802085341083123607450499282023362706881862664305265373920345462754307477367761996830415662887623894299066776162163749161203",
              (a / 5983128).ToString());
    EXPECT_EQ("-5230688839638273352512955952699271894824673073270434103551858208010333510022121440625639273609670560199100079691475825517954680459961845061088013745463814630313218853226177415922498382501298335243643736429999501072406154960826380212890848734378727980534925668996883876419962880178593428501660306355580558497326452882085949119772312653159374101601002960820636033845755341904871337305848361307435288751979610477049072824883266835879926731931285444655948164860349399002366954344045949475960802085341083123607450499282023362706881862664305265373920345462754307477367761996830415662887623894299066776162163749161203",
              (a / -5983128).ToString());
}

TEST(test_bigint, test_mod_int32) {
    BigInteger a("0");
    EXPECT_EQ(0, a % 123);
    EXPECT_EQ(0, a % -123);

    a = "31295880855727263167074137123361689253538556555530385857116022296376450713151635410807599855833680999502921261604300372979589151391050594116657405504869422301436668490865432430173545902298228105949631661458950054852343293118459218590393198006425929984721968748093987833756819667357187342684281825444651995800991825379489140585085077459872139649763805642968850431911486467300609034632065894292632684320054262874325664992598170537224594267766568019913453831724572578954233790810582953596206401859262623987183198090868253878065700665198959433806133288707878254188448423100571971204261503375449786802325574468191375789569";
    EXPECT_EQ(71, a % 123);
    EXPECT_EQ(71, a % -123);
    a = -a;
    EXPECT_EQ(-71, a % 123);
    EXPECT_EQ(-71, a % -123);
}

TEST(test_bigint, test_div_bigint) {
    BigInteger a(0);
    EXPECT_EQ("0", (a / BigInteger(123)).ToString());
    EXPECT_EQ("0", (-a / BigInteger(123)).ToString());

    a = "519539488146961479060679869281927920358975061342665793093958666579107155166871307102969868257599309960987989199605128568058272386800471927184764165803791228520565366193402657391289185119910684097546641799928942282484136521470407044556917665406994129761516482516822362000552953584757331696544686513898856702662136203388863218039551913483294613752351125925732730638298211086777757893761706323792960702106982786572481445657983844447140726113600412255324168663939704752689667750266807201036759826978349254741030918085789939019582555866484875586254880800781026486545538545860027151391819632308926981477176524843450974956132875764253939895873376261184950667395215658988090463008290854367581388125409927460448741373728688750440316763930131002809895741817444545182873156867664560012394763559167028859505114654562168421398239889563735217833703515057286133434170252933486131520742034079007788226219869034770699614913303571043423187794199744507602345020681985849393629458027114250710965213778545590582835908613098926625806816134168247845698119478333619345177189532500112700286856494036791678068938529812643092888281375309743352133113376753820332079168159903428396164912244794199998690939955484670008972127480590477607609835890912053007639131858";
    EXPECT_EQ("4223898277617573000493332270584779840316870417420047098324867207960220773714400870755852587460156991552747879671586411122424978754475381521827350941494237630248498912141485019441375488779761659329647494308365384410440134320897618248430224922008082355784686849730263105695552468168758794280851109869096395956602733360885066813329690353522720437010984763623843338522749683632339495071233384746284233350463274687581149964699055645911713220435775709392879420032030119940566404473713879683225689650230481745862039984437316577394980128995811996636218543095780703142646654844390464645461948230153877898188427031247568902082381103774422275576206311066544314369066793975512930593563340279411230797767560385857306840436818607727157046861220577258617038551361337765714415909493207804978819215928187226500041582557416003426001950321656383884826857845994196206781871975068992939193024667309006408343250967762363411503360191634499375510521949142338230447322617771133281540309163530493585083038849964151079966736691861192079730212472912584111366825027102596302253573434960265855990703203551151854219012437501163356815295734225555708399295745966018959993237072385596716787904429221138200739349231582682999773394151142094370811673909854089493001072",
              (a / 123).ToString());
    BigInteger b("28757174563597120974885030401160367925167766068550550155990770683179886947450635559296819621964307381312496773524270746923022524880966427458029400642211990715036679075375734731340857516042890565811545738991820753579532575624605488704674578877988754461726660961810617255872143249760532606323168584513333156958434965871420246207564083982735561994516624611905974601668067857982766484778849040846488730443086586061304099169118257274607972533846619190699903389799221186891886276707177253716348832344207557293906516573497572372995353746414795253898618201056494921051761981441045972894657241899301003778472997757608717040710");
    EXPECT_EQ("18066430239799411778644508656396932115098667981668903733817816378499341050863336660120349538462196137944018486024607592401291050379740726935280103846238355381503337632611624187941601823832035492774343322478956841863701502932085816307024591549813868576316710703740260247761045419895642005139549331590364106014504369423760613640532815919065103794084013512717438565079965181674230023979284386711000948457456989700448338210686186379681103040110138620555246591612622294881315208337787434799105940172603554395169665147669424859422736606551351284098007155907396100929440066734936456282168076245735055868676930063082716908278",
              (a / b).ToString());
}

TEST(test_bigint, test_mod_bigint) {
    BigInteger a(0);
    BigInteger b("4880489287277762671154218282616167104333749219288231272092117373590798540283550174097226859531218999987822979397690166420079345745762163194266106231594641659362489007576999576800584035266251411028584217862899713579840911638849070365418616539488768786152303516723685479746244709860191211501099773314719236373293176179687116403568263525488366819341356455308684494024308170550069447030789901243348842462587827506441426463774119281249590255651412046116829023372364294672157883784466665274696022894643650252033584831869973484770165201694624124714305890382044915363234696956716212819652983772146226189106875589907729039714");
    EXPECT_EQ("0", (a % b).ToString());
    EXPECT_EQ("0", (a % -b).ToString());
    EXPECT_EQ("0", (-a % b).ToString());

    a = "352780032353023023795082231427830038078876883364044054759355634772103762836047896631941037578195836469666629131931102438866291532752566403219729843192172851835916912629062539539113482825949638801947235867906252791530012148735819564139405073702776627449691692084109710139908885969632109677457424909295311946496747098932682324277926180635004493678629466799525209936545679683411365436121856684164583024422764795494240173144715309780625602194797090107934899667760206737695811802739904524595002618624846676337157938953760015485847951400082472675202461872595124799410113750768362121252040704630146239110802125803536765050313127875544019333074829242218847574320314485780848371837276240219733221069723286915943616955376668285216145599494315671029820988820736140687609456562040156309105633512787831885901119970174974204018824160704967460658202846124016605985307442394834302304056152611396956993483124076798744290031078909291385830668552512352365895704765201738958682579542774891309061447764718089021016623706718858950744675192090138803117907659111311347840660380114795535304193890594503002736492171246613347050355263653186731195741701850405794743304279359975992819647704129950945031944754326249404362430719301798334435013853932287323730372715";
    EXPECT_EQ("4616848191813888178958724294425315611847186255096914391503803681135861085037784526811463799887079781309892693491635871503622780425631385903463616119768095456487425001907117792929099902581775515133079003537469852942225447135000126333776343830399901787955916231468325737399324392782308159275717878450916532091049816136839669471813687367517081683045514954763655347886215622276486033301618216980502315990016586932601616911657350250370217046503254961562411021462003075632820361404858162548904101452613473651133011068487722207825499601108116480537915939262221796921641547949551371758171368348056466353435132388450523382089",
              (a % b).ToString());
}

TEST(test_bigint, test_is_zero) {
    BigInteger a("0");

    ASSERT_TRUE(a.IsZero());
    ASSERT_TRUE((-a).IsZero());
}

TEST(test_bigint, test_gcd) {
    BigInteger a("24956994094226105578108631194500267503924592531429203346753627215686278708540867744885180262076150664863561192145361407103043083292957800397183254096223563636540277172182561919201974364998501001332490429265111817015688546427280024751416191783914225595168840602023364700657773274506639233082191579597559426205448123021792776505304532577666521750161868618973274617343645062996340195901970559357766850229841953526746875327123428413918497974488955996947347169062513063842521097922544352466050349507982415267137662335266947676490114349854790497683399476919117390295778601315724013245833991428417521644145600473770391862389");
    BigInteger b("209321673525129078238622200913591593667125645314448281070084953353398260342322364890150858912873155526970055757932436891076731291252814525066732581768497359653232923740089708117904076957012149682738911125078374704391686722259066943711494746433472860808576907543589995744444084261736685753828394218063402840472332997940660593537347990981771311220638213379131371059386709590425629956274514496667738368082275754592291203811494253858770358619946677474334470244636595980895335488199341808087446996571811223732737290072170434233010432427503861785900196526768816342203742183740028754015650528347426789193508106431634699800070247336920234415622652316602642809993401946318897768840588451484958052046428751855652292314885905879440637156171816217651809750828519197217248808184017621290911549636743610180670788467288223146285081997099372545068772867304891660715188932122544529674092572036007539586145499221170516464123896381057805206068273481404110740287070596445260616475660132029900083539206540589936581692549594810201745635389680827316455168214235772533259924132346292530567810014929945376988611283047054824583114821133051335357438574830452222675508093882813873292489537969265656193536459585357174784603072117834863625280067503749350228410757");

    EXPECT_EQ("1",
              BigInteger::Gcd(a, b).ToString());
    EXPECT_EQ("1",
              BigInteger::Gcd(b, a).ToString());

    a = "5073159506411568510800771581097704306853898867022447911828068235846754514099332066955755975935604364805500809910117789689147202507260464583682811594675503590629598639448856209956735248646734190360182506790033949460425445821327455090537973336345558941592501290554180012619102634581508364936143906442618649075157097687300508277503160757614409927273198687451897480582744932520634970473906193944033084864232075503384291133737316372852791917602474196836249772851607505621755412146168763345726640817110266663367001963721675124991888166251717234256657206289236771658080975942419197958946474510304443937031449845940296082989";
    b = "226577499573820697460924886301688445086031049496099379047889039298323487155363185538783935287289214352939020737311194838432261938240328504994241214038843264748859641245561425982092410904422492816139735762758751180357020166413340694775916739325239091017513444822381281646122257878463170997506235377815445841348718696533971575500569725832168008861667684457779608914276578384549001253522736216349634953334391582544811161641430841812800834824135375400954498928650843832505096684378328219975951971738742110025891635916997832564990897905752077264193796742366506929931529492133451776391260091900070778251442920769943912196494747828269612683985822117665936227925567310304963770763098252242745797572961342731928974538907013675107713905013054695102763409791474487243486819867861830768130956514853571089633624006418614759524288042568777227440913802878443746795573199079656320051044641365221099094017178610831237140241599605487625606401396990574414593114180447232534292936777396580030830871040584204731795571171662912835938590489586564618124426556980287337008226599274811824381157500169015137387014232805780233759512542534843796813621882818832562541773984275170836217570987814974149863949972222075629611985725651256866239723961110543578179737934";
    EXPECT_EQ("3",
              BigInteger::Gcd(a, b).ToString());
    EXPECT_EQ("3",
              BigInteger::Gcd(b, a).ToString());

    a = 0;
    b = 123;
    EXPECT_EQ("123",
              BigInteger::Gcd(a, b).ToString());
}

TEST(test_bigint, test_extended_euclidean) {
    BigInteger a(0);
    BigInteger b(5);

    EXPECT_EQ(tuple(0, 1, 5), BigInteger::ExtendedEuclidean(a, b));

    a = -2;
    EXPECT_EQ(tuple(2, 1, 1), BigInteger::ExtendedEuclidean(a, b));
    a = 2;
    EXPECT_EQ(tuple(-2, 1, 1), BigInteger::ExtendedEuclidean(a, b));

    a = "9681629851411657946339799491994695793186049729773546949492358022336501725214750627396973441167101563500149048590331206487192726142100713897909183120032219845231689142479395364010252964075321475942922845987589279421084916137232834388740543482039082547960869415890295913687967542127487552589773734871133926634100303960860958449689984797723454194838095154128889505343679064301291994695006536010860280371526078617592353761055110511170995743690326978180347371925043328275502187432124693130104160651114598035915267019942860049505675390582590047386902474044061672235307396238332272179909971955619576950880228971286098288204";
    b = "938533570714617299725036369516056059942633412850116674880759075639382148901539793245195072714103797789549752224023555841096978204112269477807972215821423747013456331242784366684357669363889462449718640277138469348864337403854950639132322450296245994376331275728977323053085302920402935360609757737196377525803550042342856733129217229248320818695978927297333705337102083000277065404378504453206470769412532255505628150740278468233271829112484618082837494862984053198428755674395016164681169329480940253263649507414416113949320819599669139742478786300979075086732457856865818665499481919370469845661274100426697392623927885489442844041677737643745814223312731137670982184936974222459562827600504582514240384782630884778834832905621301922787546202958061754879616468433122974897331644824068987167413461757032008296807506644353207164374454307825220594573748365722792402413098252767844244253770099400756528039860541899120872719644204102131495329610459618954130387470491140900315021144334548898039941990676381642591699292976114754239620230677972287815162193088448520039498848786279266343536944582517351131607002108682036655919979467154799114913953614907595727404817528866147401555738402370121587436162210453636353639162845473093293027911635";
    EXPECT_EQ(tuple("-97559425363231118506000247111496289518639537970763203502265604131519645547028512464274993994749881178751060834562027327203074002241819703227122471049947524132523093887166343534007523616820195191545617468488473287381611268826193484967725649269947818920142934315487845883175494672603227388411069944627815150832720001324820522505425487962544172436070681569217974842884056427212174804707264987167082469303744182821999698799107697492559898393592320364620850625860039508036752477991972393930349146063615393823198438358263823014886268935874772634914030128258958218781780479310514984819492174013371228777365490585164035400026803490099739559461567535849960468295536504449840357869180122865626020082681002629105672913275385567428649327107802377891468436516125499242559856286637880249964456271545091592476182088264098254420818733798181143878716291667277476052911182569408358492309981654880401934164384807347397396553043665395947693715933139367694994823465585172369294140798299559722133260323111078012326881700892851751200397903177403272136361998091286943611158581483854595258687763803222589314362941522239661533043090882859609002782463646691389680575039040676367705414396567141802034146870543592583581115779989825321946987703985017132313169628",
                    "1006393670248832655327757451828547304257684297745395382579574520087613423293043569015965056478225508188610784255897782999984316266654708452862473978747124445365035266973157161116189096077336079056413227801243664051843678064895732651558080507743610793953315203452259977446075164435536330706006219536623866210495793112052688554661265836862699841817980184636069012204276419424628252981200122762195075419086473999399521977267261344530232256659223652551189301335407679820709034578324514849308657459593830927529191906647644969060037694793387000354715018291162163358249004721078190908683838665479669025932420527191001374849",
                    "3"),
              BigInteger::ExtendedEuclidean(a, b));
}

TEST(test_bigint, modular_exponentiation) {
    BigInteger a("12");
    BigInteger b("13");
    BigInteger m("7");

    EXPECT_EQ("5",
              BigInteger::ModularExponentiation(a, b, m).ToString());

    b = "0";
    EXPECT_EQ("1",
              BigInteger::ModularExponentiation(a, b, m).ToString());

    a = "123";
    b = "456";
    m = "65";
    EXPECT_EQ("1",
              BigInteger::ModularExponentiation(a, b, m));

    a = "24099422541234823367712668951106894191997916661764112585753226604809381711696897026086882500407434310026399683266029159444109786589957422265732711979851761363867856009171225285605980030122957567368067138701006688596382873804159751820696887280724795169741490236326675237347901444941356887827108850944339863658985211740786798795728117955864204529708808081879232224462161016101793804808128626227018352339911497647906754906265631599135890951511117298556057867072014969393761187854229015577429581422126810722090633520921071083305473801534837855815016953974202688938420106203240847530891335971183169754792739922438498821941";
    b = "688986174438622900639141985752363509577325077308626907069926282619057485079327661275928427320625312577581325013945588674924331436490547572238442516291043495113633759953462232851795299210738251283531449643302602036873281004145951244781385932512268042038013550769482944337228878591717203870918057252265429710210234016860055652510326003827288677297369246087856108027823022520335377262876667880165322651345568257435427548366203125955547326331002303093613302375781557601763417602398359528097415922157159324882595971163850729862652229716289001405580300579973111257020979461212460975699159478073090830410147308364815865066327960794072114336859984838583707600093510852559194738815272400730696295712118174049218295859332200264728037236366527954634779909152692340993372289824057941632357956880835917662488788628932767107303048053683135408199958177200347236045882124940043295645319419098174648798405466698133041577241292694270462210283940467264518311137621588439155778707168223047706512089564046369559994607423613333163976561696988119259093339634082220485146103303078910883624968688287754247537573637147381603585472082284057166815877062705125309405174117468797021604827429236365629041674000521745672882176007487363680214814501830308548663884096";
    m = "5587305659330200065221151034690484965534009555192265039136167367396236758434363497628548478964427110604740844930570580411535093894881194009147179493878259901541962360547872227558429785417949026701595777828045207036676615666963125972155010892653331089079217282608321445785635746403345197191270777104910043464106381539483939685902287300381082771162536724951904161178811751445059777884925525483984593193342826006467978390619932137630141897612797217538276857778368114655330673178890521085680210105072441924735273508727028507608965535184773431106835324857628804614887986786578013286501449118089665214261328784544417735093";
    EXPECT_EQ("2378785039171050141158955754719831557545917918320053708949540175756281103407603561547088654714624899916255596037241867000564151236913012401425354700424337639828532393315016572616148513697003888167216258535523394627472014550682375775242633223438000664380408360765483180248978381815499523591964513389692948093627477681185305174510011975258215554744596320140394744272551879219674573477468476654655090898435963838401428317832179028510589032101622347165431419701123420792629755941658532992957755597020917503316736771723955498701505208915341407873480347952016337815297814251816586785875201439187445326599008897828323618775",
              BigInteger::ModularExponentiation(a, b, m));
}

TEST(test_bigint, test_miller_rabin) {
    ASSERT_TRUE(BigInteger::MillerRabinTest(BigInteger(2)));
    ASSERT_TRUE(BigInteger::MillerRabinTest(BigInteger(-2)));
    ASSERT_TRUE(BigInteger::MillerRabinTest(BigInteger(7)));
    ASSERT_TRUE(BigInteger::MillerRabinTest(BigInteger(-7)));
    ASSERT_TRUE(BigInteger::MillerRabinTest(BigInteger(3)));
    ASSERT_TRUE(BigInteger::MillerRabinTest(BigInteger(-3)));
    ASSERT_TRUE(BigInteger::MillerRabinTest(BigInteger(101)));
    ASSERT_TRUE(BigInteger::MillerRabinTest(BigInteger("28690781997870142834613410775655234893149351420048811044717415169083153252840698200846621041385221305319411028590325718489036928542334664799499522039638348986232905631781563438888850318458251305765198482503998905151911501061400098535722251816672992446926047581449834395670996271524006951837692877451745843974214267651969208438993154749821129580423481514128801585217808675469785929515289791461470696359713658133095892057845336058259722662417262362893764762416304420268159877268955829749017009402855328883930510464630719147408867433085753399342198776159260621015752271958220385731530457767726902533741869412893173136619")));
    ASSERT_FALSE(BigInteger::MillerRabinTest(BigInteger(1)));
}

int main() {
    ::testing::InitGoogleTest();
    return RUN_ALL_TESTS();
}